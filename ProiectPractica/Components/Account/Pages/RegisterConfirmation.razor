@page "/Account/RegisterConfirmation"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ProiectPractica.Entities
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<AppUserEntity> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IEmailSender<AppUserEntity> EmailSender
@inject ILogger<Register> Logger
<PageTitle>Register Confirmation</PageTitle>
<h1>Register Confirmation</h1>
<p>Please check your email to confirm your account.</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" method="post" OnValidSubmit="ResendEmailConfirmation" FormName="resend-confirmation">
            <DataAnnotationsValidator />
            <h2>Resend confirmation email</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resend</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task ResendEmailConfirmation()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }
}
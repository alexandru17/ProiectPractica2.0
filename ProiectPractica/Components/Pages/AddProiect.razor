@page "/adauga-proiect"
@using ProiectPractica.Models
@using ProiectPractica.Entities
@inject ProiectPractica.Data.ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore

<h3>Adaugă Proiect</h3>

@if (!string.IsNullOrEmpty(mesajEroare))
{
    <div class="alert alert-danger">@mesajEroare</div>
}

@if (!string.IsNullOrEmpty(mesajSucces))
{
    <div class="alert alert-success">@mesajSucces</div>
}

<EditForm Model="@proiectModel" OnSubmit="SalveazaProiect" FormName="AdaugaProiectForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nume Client</label>
        <InputText class="form-control" @bind-Value="proiectModel.NumeClient" />
        <ValidationMessage For="@(() => proiectModel.NumeClient)" />
    </div>

    <div class="mb-3">
        <label>Domeniul proiectului</label>
        <InputText class="form-control" @bind-Value="proiectModel.Domeniul" />
        <ValidationMessage For="@(() => proiectModel.Domeniul)" />
    </div>

    <div class="mb-3">
        <label>Obiectul contractului</label>
        <InputText class="form-control" @bind-Value="proiectModel.ObiectulContractului" />
        <ValidationMessage For="@(() => proiectModel.ObiectulContractului)" />
    </div>

    <div class="mb-3">
        <label>Data Semnare</label>
        <InputDate class="form-control" @bind-Value="proiectModel.DataSemnareContract" />
        <ValidationMessage For="@(() => proiectModel.DataSemnareContract)" />
    </div>

    <div class="mb-3">
        <label>Data Încheiere</label>
        <InputDate class="form-control" @bind-Value="proiectModel.DataIncheiereContract" />
        <ValidationMessage For="@(() => proiectModel.DataIncheiereContract)" />
    </div>

    <div class="mb-3">
        <label>Valoare Contract</label>
        <InputNumber class="form-control" @bind-Value="proiectModel.ValoareContract" />
        <ValidationMessage For="@(() => proiectModel.ValoareContract)" />
    </div>

    <div class="mb-3">
        <label>Număr livrabile</label>
        <InputNumber class="form-control" @bind-Value="proiectModel.NrLivrabile" />
    </div>

    <div class="mb-3">
        <label>Status</label>
        <InputSelect class="form-select" @bind-Value="proiectModel.Status">
            @foreach (var status in Enum.GetValues<StatusProiect>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="proiectModel.EsteClientPublic" />
        <label class="form-check-label">Este client public?</label>
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="proiectModel.AreSubcontractor" />
        <label class="form-check-label">Are subcontractor?</label>
    </div>

    <button class="btn btn-primary" type="submit">Salvează</button>
</EditForm>

@code {
	[SupplyParameterFromForm]
    Proiect proiectModel { get; set; } = new();
    string? mesajEroare = null;
    string? mesajSucces = null;

    async Task SalveazaProiect()
    {
        mesajEroare = null;
        mesajSucces = null;

        var proiectNou = new ProiectEntity
            {
                NumeClient = proiectModel.NumeClient,
                Domeniul = proiectModel.Domeniul,
                ObiectulContractului = proiectModel.ObiectulContractului,
                DataSemnareContract = proiectModel.DataSemnareContract,
                DataIncheiereContract = proiectModel.DataIncheiereContract,
                ValoareContract = proiectModel.ValoareContract,
                NrLivrabile = proiectModel.NrLivrabile,
                Status = proiectModel.Status switch
                {
                    StatusProiect.Nou => StatusProiectEntity.Nou,
                    StatusProiect.InDesfasurare => StatusProiectEntity.InDesfasurare,
                    StatusProiect.Suspendat => StatusProiectEntity.Suspendat,
                    StatusProiect.Prelungit => StatusProiectEntity.Prelungit,
                    StatusProiect.Intarziat => StatusProiectEntity.Intarziat,
                    StatusProiect.Finalizat => StatusProiectEntity.Finalizat,
                    StatusProiect.Anulat => StatusProiectEntity.Anulat,
                    _ => throw new ArgumentOutOfRangeException()
                },
                EsteClientPublic = proiectModel.EsteClientPublic,
                AreSubcontractor = proiectModel.AreSubcontractor,
                NumarSubcontractori = proiectModel.NumarSubcontractori ?? 0
            };

        DbContext.Proiecte.Add(proiectNou);
        await DbContext.SaveChangesAsync();

        mesajSucces = "Proiectul a fost adăugat cu succes!";
        proiectModel = new();
    }
}

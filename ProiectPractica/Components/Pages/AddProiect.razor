@page "/adauga-proiect"
@using ProiectPractica.Models
@using ProiectPractica.Entities
@inject ProiectPractica.Data.ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>Adaugă Proiect</h3>

@if (!string.IsNullOrEmpty(mesajEroare))
{
    <div class="alert alert-danger">@mesajEroare</div>
}

@if (!string.IsNullOrEmpty(mesajSucces))
{
    <div class="alert alert-success">@mesajSucces</div>
}

<EditForm Model="@proiectModel" OnValidSubmit="SalveazaProiect" FormName="AdaugaProiectForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nume Client</label>
        <InputText class="form-control" @bind-Value="proiectModel.NumeClient" />
        <ValidationMessage For="@(() => proiectModel.NumeClient)" />
    </div>

    <div class="mb-3">
        <label>Domeniul proiectului</label>
        <InputText class="form-control" @bind-Value="proiectModel.Domeniul" />
        <ValidationMessage For="@(() => proiectModel.Domeniul)" />
    </div>

    <div class="mb-3">
        <label>Obiectul contractului</label>
        <InputText class="form-control" @bind-Value="proiectModel.ObiectulContractului" />
    </div>

    <div class="mb-3">
        <label>Data Semnare</label>
        <InputDate class="form-control" @bind-Value="proiectModel.DataSemnareContract" />
        <ValidationMessage For="@(() => proiectModel.DataSemnareContract)" />
    </div>

    <div class="mb-3">
        <label>Data Încheiere</label>
        <InputDate class="form-control" @bind-Value="proiectModel.DataIncheiereContract" />
        <ValidationMessage For="@(() => proiectModel.DataIncheiereContract)" />
    </div>

    <div class="mb-3">
        <label>Valoare Contract</label>
        <InputNumber class="form-control" @bind-Value="proiectModel.ValoareContract" />
        <ValidationMessage For="@(() => proiectModel.ValoareContract)" />
    </div>

    <div class="mb-3">
        <label>Număr livrabile</label>
        <InputNumber class="form-control" @bind-Value="proiectModel.NrLivrabile" />
        <ValidationMessage For="@(() => proiectModel.NrLivrabile)" />
    </div>

    <div class="mb-3">
        <label>Status</label>
        <InputSelect class="form-select" @bind-Value="proiectModel.Status">
            @foreach (var status in Enum.GetValues<StatusProiect>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => proiectModel.Status)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="proiectModel.EsteClientPublic" />
        <label class="form-check-label">Este client public?</label>
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="proiectModel.ExistaAmendamente" />
        <label class="form-check-label">Există amendamente?</label>
    </div>

    @if (proiectModel.ExistaAmendamente)
    {
        <div class="mb-3">
            <label>Număr amendamente</label>
            <InputNumber class="form-control" @bind-Value="proiectModel.NumarAmendamente" />
            <ValidationMessage For="@(() => proiectModel.NumarAmendamente)" />
        </div>
    }

    <div class="form-check mb-3">
        <!-- Fixed: Corrected @onchange to call HandleAreSubcontractorChanged -->
        <InputCheckbox class="form-check-input" @bind-Value="proiectModel.AreSubcontractor" @onchange="HandleAreSubcontractorChanged" />
        <label class="form-check-label">Are subcontractor?</label>
    </div>

    @if (proiectModel.AreSubcontractor)
    {
        <div class="mb-3">
            <label>Număr subcontractori</label>
            <InputNumber class="form-control" @bind-Value="proiectModel.NumarSubcontractori" />
            <ValidationMessage For="@(() => proiectModel.NumarSubcontractori)" />
        </div>

       <div class="mb-3">
    <label>Selectați subcontractori</label>
    <!-- Fixed: Removed @onchange, using @bind-Value with custom property -->
            <select multiple class="form-control" @onchange="OnSubcontractoriChanged">
                @foreach (var subcontractor in subcontractori)
                {
                    <option value="@subcontractor.Id" selected="@proiectModel.SelectedSubcontractorIds.Contains(subcontractor.Id)">
                        @subcontractor.Nume (@subcontractor.Domeniu)
                    </option>
                }
            </select>
    @if (proiectModel.SelectedSubcontractorIds != null && proiectModel.SelectedSubcontractorIds.Any() && proiectModel.SelectedSubcontractorIds.Count != proiectModel.NumarSubcontractori)
    {
        <div class="text-danger">Numărul subcontractori selectați trebuie să fie egal cu numărul specificat.</div>
    }
</div>
    }

    <div class="btn-group" role="group">
        <button class="btn btn-primary" type="submit" disabled="@(proiectModel.AreSubcontractor && proiectModel.NumarSubcontractori > 0 && (proiectModel.SelectedSubcontractorIds == null || proiectModel.SelectedSubcontractorIds.Count != proiectModel.NumarSubcontractori))">Salvează</button>
        <a class="btn btn-sm btn-outline-primary" href="@NavigationManager.ToAbsoluteUri($"/vizualizare-proiecte")">
            Vizualizează proiectele
        </a>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    Proiect proiectModel { get; set; } = new Proiect { SelectedSubcontractorIds = new List<int>() };
    string? mesajEroare = null;
    string? mesajSucces = null;
    List<SubcontractorEntity> subcontractori = new();
    private List<int> SelectedSubcontractorIds
    {
        get => proiectModel.SelectedSubcontractorIds;
        set
        {
            proiectModel.SelectedSubcontractorIds = value ?? new List<int>();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        subcontractori = await DbContext.Subcontractori.ToListAsync();

    }
    async Task OnSubcontractoriChanged(ChangeEventArgs e)
    {
        // Apelează JS pentru a lua toate valorile selectate
        var selectedValues = await JSRuntime.InvokeAsync<int[]>("getSelectedValues", "subcontractoriSelect");
        proiectModel.SelectedSubcontractorIds = selectedValues.ToList();
    }
    void HandleAreSubcontractorChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            proiectModel.AreSubcontractor = (bool)e.Value;
            StateHasChanged();
        }
    }
    async Task SalveazaProiect()
    {
        mesajEroare = null;
        mesajSucces = null;

        try
        {
            var proiectNou = new ProiectEntity
                {
                    NumeClient = proiectModel.NumeClient,
                    Domeniul = proiectModel.Domeniul,
                    ObiectulContractului = proiectModel.ObiectulContractului,
                    DataSemnareContract = proiectModel.DataSemnareContract,
                    DataIncheiereContract = proiectModel.DataIncheiereContract,
                    ValoareContract = proiectModel.ValoareContract,
                    NrLivrabile = proiectModel.NrLivrabile,
                    Status = proiectModel.Status switch
                    {
                        StatusProiect.Nou => StatusProiectEntity.Nou,
                        StatusProiect.InDesfasurare => StatusProiectEntity.InDesfasurare,
                        StatusProiect.Suspendat => StatusProiectEntity.Suspendat,
                        StatusProiect.Prelungit => StatusProiectEntity.Prelungit,
                        StatusProiect.Intarziat => StatusProiectEntity.Intarziat,
                        StatusProiect.Finalizat => StatusProiectEntity.Finalizat,
                        StatusProiect.Anulat => StatusProiectEntity.Anulat,
                        _ => throw new ArgumentOutOfRangeException()
                    },
                    EsteClientPublic = proiectModel.EsteClientPublic,
                    ExistaAmendamente = proiectModel.ExistaAmendamente,
                    NumarAmendamente = proiectModel.NumarAmendamente,
                    AreSubcontractor = proiectModel.AreSubcontractor,
                    NumarSubcontractori = proiectModel.NumarSubcontractori
                };

            if (proiectModel.AreSubcontractor && proiectModel.SelectedSubcontractorIds.Any())
            {
                var selectedSubcontractors = await DbContext.Subcontractori
                    .Where(s => proiectModel.SelectedSubcontractorIds.Contains(s.Id))
                    .ToListAsync();
                proiectNou.Subcontractori = selectedSubcontractors;
            }

            DbContext.Proiecte.Add(proiectNou);
            await DbContext.SaveChangesAsync();

            mesajSucces = "Proiectul a fost adăugat cu succes!";
            proiectModel = new();
        }
        catch (Exception ex)
        {
            mesajEroare = $"Eroare la salvarea proiectului: {ex.Message}";
        }
    }
}
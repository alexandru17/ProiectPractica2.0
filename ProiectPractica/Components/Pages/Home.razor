@page "/"
@using Microsoft.AspNetCore.Identity
@using ProiectPractica.Entities
@using ProiectPractica.Components.Account
@using ProiectPractica.Data
@using ProiectPractica.Interfaces
@inject UserManager<AppUserEntity> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IRepository<ProiectEntity> ProiectRepository
@inject IRepository<TaskProiectEntity> TaskRepository
@inject IRepository<ActAditionalEntity> ActAditionalRepository
@inject IRepository<ModificareValoareEntity> ModificareValoareRepository
@inject IRepository<PrelungireContractEntity> PrelungireContractRepository
@inject IRepository<ModificareLivrabileEntity> ModificareLivrabileRepository
@inject INotificationService NotificationService
@inject ILogger<Home> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IRepository<UserSelectedProject> UserSelectedProjectRepository
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

@if (currentUser == null)
{
    <p>Please <a href="/Account/Login">log in</a> to view your projects.</p>
}
else
{
    <h2>Contractele Mele</h2>

    <!-- Select My Projects -->
    <p>Selecteaza contractele tale</p>
    @if (myProiecte.Any())
    {
        <div class="mb-3">
            <select @bind="selectedProjectId" class="form-select">
                <option value="0">-- Select a Project --</option>
                @foreach (var proiect in myProiecte)
                {
                    <option value="@proiect.Cod">@proiect.NumeClient (Cod: @proiect.Cod)</option>
                }
            </select>
        </div>
        <button @onclick="AddSelectedProject" class="btn btn-secondary">Adauga Contract</button>
    }
    else
    {
        <p>Nu esti responsabil de niciun contract.</p>
    }

    <!-- Display Selected Projects -->
    <h3>Contractele Tale</h3>
    @if (selectedProiecte.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var proiect in selectedProiecte)
            {
                var luniRamase = GetLuniRamase(proiect.DataIncheiereContract);
                <div class="col">
                    <div class="card shadow-sm border-primary">
                        <div class="card-body">
                            <h5 class="card-title">@proiect.NumeClient (Cod: @proiect.Cod)</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@proiect.Domeniul</h6>
                            <p class="card-text">
                                <strong>Obiect:</strong> @proiect.ObiectulContractului<br />
                                <strong>Valoare:</strong> @proiect.ValoareContract.ToString("C")<br />
                                <strong>Status:</strong> @proiect.Status<br />
                                <strong>Data încheiere:</strong> @proiect.DataIncheiereContract.ToShortDateString()<br />
                                <strong>Data semnare:</strong> @proiect.DataSemnareContract.ToShortDateString()<br />
                                <strong>Luni rămase:</strong> @luniRamase<br />
                                <strong>Subcontractori:</strong> @(proiect.AreSubcontractor ? $"Da ({proiect.NumarSubcontractori})" : "Nu")
                            </p>
                            <div class="btn-group">
                                <a class="btn btn-sm btn-outline-primary"
                                   href="@NavigationManager.ToAbsoluteUri($"/detalii-proiectul-meu/{proiect.Cod}")">
                                    Vezi detalii
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveProject(proiect.Cod)">
                                    Șterge
                                </button>
                                <button class="btn btn-sm btn-outline-success" @onclick="() => ShowAddTaskModal(proiect.Cod)">
                                    Adauga Task
                                </button>
                                <button class="btn btn-sm btn-outline-info" @onclick="() => ShowAddActModal(proiect.Cod)">
                                    Adauga Act Aditional
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No projects selected.</p>
    }

    <!-- Task Modal -->
    @if (showTaskModal)
    {
        <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Adauga Task pentru Proiectul @selectedProiect?.NumeClient</h5>
                        <button type="button" class="btn-close" @onclick="CloseTaskModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newTask" OnValidSubmit="HandleAddTask">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Des mapcriere</label>
                                <InputText class="form-control" @bind-Value="newTask.Descriere" />
                                <ValidationMessage For="@(() => newTask.Descriere)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Data Start</label>
                                <InputDate class="form-control" @bind-Value="newTask.DataStart" />
                                <ValidationMessage For="@(() => newTask.DataStart)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Deadline</label>
                                <InputDate class="form-control" @bind-Value="newTask.Deadline" />
                                <ValidationMessage For="@(() => newTask.Deadline)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <InputSelect class="form-select" @bind-Value="newTask.Status">
                                    <option value="Open">Open</option>
                                    <option value="InProgress">In Progress</option>
                                    <option value="Completed">Completed</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newTask.Status)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Responsabil</label>
                                <InputSelect class="form-select" @bind-Value="newTask.ResponsabilId">
                                    <option value="">-- Select Responsabil --</option>
                                    @foreach (var user in projectUsers)
                                    {
                                        <option value="@user.Id">@user.UserName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newTask.ResponsabilId)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Salveaza Task</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseTaskModal">Anuleaza</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Act Modal -->
    @if (showActModal)
    {
        <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Adauga Act Aditional pentru Proiectul @selectedProiect?.NumeClient</h5>
                        <button type="button" class="btn-close" @onclick="CloseActModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Tip Act</label>
                            <select class="form-select" @bind="selectedActType">
                                <option value="">-- Select Tip Act --</option>
                                <option value="ModificareValoare">Modificare Valoare</option>
                                <option value="PrelungireContract">Prelungire Contract</option>
                                <option value="ModificareLivrabile">Modificare Livrabile</option>
                            </select>
                        </div>

                        @if (selectedActType == "ModificareValoare")
                        {
                            <EditForm Model="modificareValoare" OnValidSubmit="HandleAddModificareValoare">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label class="form-label">Data Act</label>
                                    <InputDate class="form-control" @bind-Value="modificareValoare.DataAct" />
                                    <ValidationMessage For="@(() => modificareValoare.DataAct)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Valoare Noua</label>
                                    <InputNumber class="form-control" @bind-Value="modificareValoare.ValoareNoua" />
                                    <ValidationMessage For="@(() => modificareValoare.ValoareNoua)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Motiv</label>
                                    <InputTextArea class="form-control" @bind-Value="modificareValoare.Motiv" />
                                    <ValidationMessage For="@(() => modificareValoare.Motiv)" />
                                </div>
                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                            </EditForm>
                        }
                        else if (selectedActType == "PrelungireContract")
                        {
                            <EditForm Model="prelungireContract" OnValidSubmit="HandleAddPrelungireContract">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label class="form-label">Data Act</label>
                                    <InputDate class="form-control" @bind-Value="prelungireContract.DataAct" />
                                    <ValidationMessage For="@(() => prelungireContract.DataAct)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Noua Data Incheiere</label>
                                    <InputDate class="form-control" @bind-Value="prelungireContract.NouaDataIncheiere" />
                                    <ValidationMessage For="@(() => prelungireContract.NouaDataIncheiere)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Observatii</label>
                                    <InputTextArea class="form-control" @bind-Value="prelungireContract.Observatii" />
                                    <ValidationMessage For="@(() => prelungireContract.Observatii)" />
                                </div>
                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                            </EditForm>
                        }
                        else if (selectedActType == "ModificareLivrabile")
                        {
                            <EditForm Model="modificareLivrabile" OnValidSubmit="HandleAddModificareLivrabile">
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label class="form-label">Data Act</label>
                                    <InputDate class="form-control" @bind-Value="modificareLivrabile.DataAct" />
                                    <ValidationMessage For="@(() => modificareLivrabile.DataAct)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Descriere Schimbare</label>
                                    <InputTextArea class="form-control" @bind-Value="modificareLivrabile.DescriereSchimbare" />
                                    <ValidationMessage For="@(() => modificareLivrabile.DescriereSchimbare)" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Tip Schimbare</label>
                                    <InputSelect class="form-select" @bind-Value="modificareLivrabile.EsteAdaugare">
                                        <option value="true">Adaugare</option>
                                        <option value="false">Eliminare</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => modificareLivrabile.EsteAdaugare)" />
                                </div>
                                <button type="submit" class="btn btn-primary">Salveaza Act</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseActModal">Anuleaza</button>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private AppUserEntity? currentUser;
    private List<ProiectEntity> myProiecte = new();
    private int selectedProjectId;
    private List<ProiectEntity> selectedProiecte = new();
    private bool showTaskModal;
    private bool showActModal;
    private TaskProiectEntity newTask = new();
    private ModificareValoareEntity modificareValoare = new();
    private PrelungireContractEntity prelungireContract = new();
    private ModificareLivrabileEntity modificareLivrabile = new();
    private string selectedActType = "";
    private int currentProiectCod;
    private ProiectEntity? selectedProiect;
    private List<AppUserEntity> projectUsers = new();

    private int GetLuniRamase(DateTime dataIncheiere)
    {
        var dataCurenta = DateTime.Now;
        var diferenta = dataIncheiere.Year * 12 + dataIncheiere.Month - (dataCurenta.Year * 12 + dataCurenta.Month);
        return diferenta > 0 ? diferenta : 0;
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext);
        if (currentUser != null)
        {
            var responsibleQuery = ProiectRepository.GetAllQueryable()
                .Include(p => p.Responsabili)
                .Where(p => p.Responsabili.Any(rp => rp.AppUserId == currentUser.Id));
            myProiecte = await responsibleQuery.ToListAsync();
            Logger.LogInformation("Loaded {Count} responsible projects for user {Email}", myProiecte.Count, currentUser.Email);

            var selectedQuery = UserSelectedProjectRepository.GetAllQueryable()
                .Include(up => up.Proiect);
            var userSelections = await selectedQuery
                .Where(up => up.UserId == currentUser.Id)
                .ToListAsync();
            selectedProiecte = userSelections.Select(up => up.Proiect).ToList();
        }
    }

    private async Task AddSelectedProject()
    {
        if (selectedProjectId != 0 && myProiecte.Any(p => p.Cod == selectedProjectId))
        {
            var selected = myProiecte.First(p => p.Cod == selectedProjectId);
            if (!selectedProiecte.Contains(selected))
            {
                selectedProiecte.Add(selected);
                var userSelection = new UserSelectedProject
                {
                    UserId = currentUser!.Id,
                    ProiectId = selected.Cod
                };
                await UserSelectedProjectRepository.AddAsync(userSelection);
                await UserSelectedProjectRepository.SaveAsync();
                Logger.LogInformation("Added project {Cod} to selected projects for user {Email}", selected.Cod, currentUser.Email);
            }
        }
        selectedProjectId = 0;
    }

    private async Task RemoveProject(int codProiect)
    {
        var proiectToRemove = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        if (proiectToRemove != null)
        {
            selectedProiecte.Remove(proiectToRemove);
            var userSelection = await UserSelectedProjectRepository.GetAllQueryable()
                .Where(up => up.UserId == currentUser!.Id && up.ProiectId == codProiect)
                .FirstOrDefaultAsync();
            if (userSelection != null)
            {
                UserSelectedProjectRepository.Delete(userSelection);
                await UserSelectedProjectRepository.SaveAsync();
                Logger.LogInformation("Removed project {Cod} from selected projects for user {Email}", codProiect, currentUser.Email);
            }
        }
    }

    private async Task ShowAddTaskModal(int codProiect)
    {
        currentProiectCod = codProiect;
        selectedProiect = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        newTask = new TaskProiectEntity
        {
            Cod = codProiect,
            DataStart = DateTime.Today,
            Deadline = DateTime.Today.AddDays(7),
            Status = "Open"
        };

        // Load users assigned to the project
        var responsabili = await ProiectRepository.GetQueryableWithIncludes(p => p.Responsabili)
            .Where(p => p.Cod == codProiect)
            .SelectMany(p => p.Responsabili)
            .Select(rp => rp.AppUser)
            .ToListAsync();
        projectUsers = responsabili;
        showTaskModal = true;
        StateHasChanged();
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
        newTask = new();
        projectUsers = new();
        StateHasChanged();
    }

    private async Task HandleAddTask()
    {
        newTask.EsteNotificare = true;
        await TaskRepository.AddAsync(newTask);
        await TaskRepository.SaveAsync();

        // Update project (optional, e.g., update status)
        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        // Example: proiect.Status = "In Progress";
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        // Send notifications
        var responsabil = await UserManager.FindByIdAsync(newTask.ResponsabilId);
        if (responsabil != null)
        {
            await NotificationService.SendTaskNotificationAsync(newTask, responsabil);
            await NotificationService.ShowUINotificationAsync($"Task assigned to {responsabil.UserName} for project {selectedProiect?.NumeClient}", currentUser!.Id);
        }

        Logger.LogInformation("Added task for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseTaskModal();
    }

    private void ShowAddActModal(int codProiect)
    {
        currentProiectCod = codProiect;
        selectedProiect = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        modificareValoare = new() { Cod = codProiect, DataAct = DateTime.Today };
        prelungireContract = new() { Cod = codProiect, DataAct = DateTime.Today };
        modificareLivrabile = new() { Cod = codProiect, DataAct = DateTime.Today };
        selectedActType = "";
        showActModal = true;
        StateHasChanged();
    }

    private void CloseActModal()
    {
        showActModal = false;
        selectedActType = "";
        StateHasChanged();
    }

    private async Task HandleAddModificareValoare()
    {
        await ModificareValoareRepository.AddAsync(modificareValoare);
        await ModificareValoareRepository.SaveAsync();

        // Update project
        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        proiect.ValoareContract = modificareValoare.ValoareNoua;
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        Logger.LogInformation("Added ModificareValoare for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }

    private async Task HandleAddPrelungireContract()
    {
        await PrelungireContractRepository.AddAsync(prelungireContract);
        await PrelungireContractRepository.SaveAsync();

        // Update project
        var proiect = await ProiectRepository.GetByIdAsync(currentProiectCod);
        proiect.DataIncheiereContract = prelungireContract.NouaDataIncheiere;
        ProiectRepository.Update(proiect);
        await ProiectRepository.SaveAsync();

        Logger.LogInformation("Added PrelungireContract for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }

    private async Task HandleAddModificareLivrabile()
    {
        await ModificareLivrabileRepository.AddAsync(modificareLivrabile);
        await ModificareLivrabileRepository.SaveAsync();

        // Optionally update project or livrabile
        Logger.LogInformation("Added ModificareLivrabile for project {Cod} by user {Email}", currentProiectCod, currentUser!.Email);
        CloseActModal();
    }
}

@page "/"
@using Microsoft.AspNetCore.Identity
@using ProiectPractica.Entities
@using ProiectPractica.Components.Account
@inject UserManager<AppUserEntity> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IRepository<ProiectEntity> ProiectRepository
@inject ILogger<Home> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ProiectPractica.Interfaces.IRepository<ProiectPractica.Entities.UserSelectedProject> UserSelectedProjectRepository // Updated namespace
@using Microsoft.EntityFrameworkCore
@using ProiectPractica.Interfaces
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>
@if (currentUser == null)
{
    <p>Please <a href="/Account/Login">log in</a> to view your projects.</p>
}
else
{
    
   
    <h2>Contractele Mele</h2>

    <!-- Select My Projects -->
    <p>Selecteaza contractele tale</p>
    @if (myProiecte.Any())
    {
        <div class="mb-3">
            <select @bind="selectedProjectId" class="form-select">
                <option value="0">-- Select a Project --</option>
                @foreach (var proiect in myProiecte)
                {
                    <option value="@proiect.Cod">@proiect.NumeClient (Cod: @proiect.Cod)</option>
                }
            </select>
        </div>
        <button @onclick="AddSelectedProject" class="btn btn-secondary">Adauga Contact</button>
    }
    else
    {
        <p>Nu esti responsabil de niciun contract.</p>
    }

    <!-- Display Selected Projects (Card Layout like Vizualizare-Proiecte) -->
    <h3>Contractele Tale</h3>
    @if (selectedProiecte.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var proiect in selectedProiecte)
            {
                var luniRamase = GetLuniRamase(proiect.DataIncheiereContract);
                <div class="col">
                    <div class="card shadow-sm border-primary">
                        <div class="card-body">
                            <h5 class="card-title">@proiect.NumeClient (Cod: @proiect.Cod)</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@proiect.Domeniul</h6>
                            <p class="card-text">
                                <strong>Obiect:</strong> @proiect.ObiectulContractului<br />
                                <strong>Valoare:</strong> @proiect.ValoareContract.ToString("C")<br />
                                <strong>Status:</strong> @proiect.Status<br />
                                <strong>Data încheiere:</strong> @proiect.DataIncheiereContract.ToShortDateString()<br />
                                <strong>Data semnare:</strong> @proiect.DataSemnareContract.ToShortDateString()<br />
                                <strong>Luni rămase:</strong> @luniRamase<br />
                                <strong>Subcontractori:</strong> @(proiect.AreSubcontractor ? $"Da ({proiect.NumarSubcontractori})" : "Nu")
                            </p>
                            <a class="btn btn-sm btn-outline-primary"
                               href="@NavigationManager.ToAbsoluteUri($"/detalii-proiectul-meu/{proiect.Cod}")">
                                Vezi detalii
                            </a>
                            <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => RemoveProject(proiect.Cod)">
                                Șterge
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No projects selected.</p>
    }
}
<!-- Rest of the Razor markup remains unchanged -->
@code {
    private AppUserEntity? currentUser;
    private List<ProiectEntity> myProiecte = new(); // Projects where user is ResponsabilProiect
    private int selectedProjectId;
    private List<ProiectEntity> selectedProiecte = new();

    private int GetLuniRamase(DateTime dataIncheiere)
    {
        var dataCurenta = DateTime.Now;
        var diferenta = dataIncheiere.Year * 12 + dataIncheiere.Month - (dataCurenta.Year * 12 + dataCurenta.Month);
        return diferenta > 0 ? diferenta : 0; // Ensure non-negative months
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext);
        if (currentUser != null)
        {
            // Load projects where user is ResponsabilProiect
            var responsibleQuery = ProiectRepository.GetAllQueryable()
                .Include(p => p.Responsabili)
                .Where(p => p.Responsabili.Any(rp => rp.AppUserId == currentUser.Id));
            myProiecte = await responsibleQuery.ToListAsync();
            Logger.LogInformation("Loaded {Count} responsible projects for user {Email}: {@Proiecte}", myProiecte.Count, currentUser.Email, myProiecte);

            // Load selected projects from UserSelectedProject
            var selectedQuery = UserSelectedProjectRepository.GetAllQueryable()
                .Include(up => up.Proiect);
            var userSelections = await selectedQuery
                .Where(up => up.UserId == currentUser.Id)
                .ToListAsync();
            selectedProiecte = userSelections.Select(up => up.Proiect).ToList();
        }
        else
        {
            Logger.LogWarning("No current user found.");
        }
    }

    private async Task AddSelectedProject()
    {
        if (selectedProjectId != 0 && myProiecte.Any(p => p.Cod == selectedProjectId))
        {
            var selected = myProiecte.First(p => p.Cod == selectedProjectId);
            if (!selectedProiecte.Contains(selected)) // Avoid duplicates
            {
                selectedProiecte.Add(selected);
                // Save to database
                var userSelection = new UserSelectedProject
                    {
                        UserId = currentUser.Id,
                        ProiectId = selected.Cod
                    };
                await UserSelectedProjectRepository.AddAsync(userSelection);
                Logger.LogInformation("Added project {Cod} to selected projects for user {Email}", selected.Cod, currentUser.Email);
            }
        }
        else
        {
            Logger.LogWarning("No valid project selected or project not found for ID {Id}", selectedProjectId);
        }
        selectedProjectId = 0; // Reset selection
    }

    private async Task RemoveProject(int codProiect)
    {
        var proiectToRemove = selectedProiecte.FirstOrDefault(p => p.Cod == codProiect);
        if (proiectToRemove != null)
        {
            selectedProiecte.Remove(proiectToRemove);
            // Remove from database
            var userSelection = await UserSelectedProjectRepository.GetAllQueryable()
                .Where(up => up.UserId == currentUser.Id && up.ProiectId == codProiect)
                .FirstOrDefaultAsync();
            if (userSelection != null)
            {
                UserSelectedProjectRepository.Delete(userSelection);
                await UserSelectedProjectRepository.SaveAsync();
                Logger.LogInformation("Removed project {Cod} from selected projects for user {Email}", codProiect, currentUser.Email);
            }
        }
    }
}